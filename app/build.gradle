apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'


final VERSION_MAJOR = 1 // max two digits
final VERSION_MINOR = 0 // max two digits
final VERSION_PATCH = 0 // max two digits
final VERSION_BUILD = 0 // max three digits

def keystorePropertiesFile = rootProject.file("app/keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 28
    packagingOptions {
        exclude 'META-INF/LICENSE'
    }

    defaultConfig {
        applicationId "cz.example.android"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode VERSION_MAJOR * 10000000 + VERSION_MINOR * 100000 + VERSION_PATCH * 1000 + VERSION_BUILD
        versionName "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        def locales = ["cs","ro", "sk", "pl", "hu"]
        buildConfigField "String[]", "APP_LOCALES", "new String[]{\""+locales.join("\",\"")+"\"}"
        resConfigs locales

        // Client constant for api access
        buildConfigField "String", "CLIENT_ID", '"CLIENT_ID"'
        buildConfigField "String", "CLIENT_SECRET", '"CLIENT_SECRET"'

        // Field for build variant
        buildConfigField "boolean", "DEV_ENVIRONMENT", "false"
        buildConfigField "boolean", "LOGS", "false"
    }

    dataBinding {
        enabled = true
    }

    dexOptions {
        javaMaxHeapSize "2g"
    }

    sourceSets {
        androidTest.assets.srcDirs +=
                files("$projectDir/schemas".toString())
    }

    signingConfigs {
        uploadSign {
            keyAlias keystoreProperties['uploadAlias']
            keyPassword keystoreProperties['uploadPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "DEV_ENVIRONMENT", "true"
            buildConfigField "boolean", "LOGS", "true"
            multiDexEnabled true
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }

        release {
            zipAlignEnabled true
            minifyEnabled true
            shrinkResources true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.uploadSign
        }
    }

    flavorDimensions "dataSource"

    productFlavors {
        backend {
            dimension "dataSource"
        }
        mock {
            dimension "dataSource"
        }
    }

    compileOptions
            {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
}

ext {
    lifecycle_version = "2.0.0"
    room_version = "2.2.0-alpha01"
    rxJavaVersion = '2.2.3'
    rxAndroidVersion = '2.1.1'
    retrofitVersion = '2.5.0'
    okHttpsVersion = '3.12.0'
    stethoVersion = '1.5.1'
    gsonVersion = '2.8.5'
    jsonapiVersion = '0.9'
    jacsonKotlinVersion = "2.9.6"
    glideVersion = '4.8.0'
    glideOkhttpVersion = '4.8.0'
    daggerVersion = '2.16'
    assistedinject = '0.3.2'
    epoxy = '3.7.0'
    mvrx = '1.0.2'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.multidex:multidex:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'

    // Kotlin libraries
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // Room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-rxjava2:$room_version"
    androidTestImplementation "androidx.room:room-testing:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Android support libraries
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.1.0-alpha08'
    implementation 'androidx.vectordrawable:vectordrawable:1.0.1'
    implementation 'androidx.browser:browser:1.0.0'
    implementation "androidx.constraintlayout:constraintlayout:2.0.0-beta2"
    implementation 'com.google.android:flexbox:1.1.0'


    // RxJava2
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
    implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"

    // OkHttp
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpsVersion"
    implementation "com.squareup.okhttp3:okhttp:$okHttpsVersion"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"

    // Stetho
    debugImplementation "com.facebook.stetho:stetho:${stethoVersion}"
    implementation "com.facebook.stetho:stetho-okhttp3:${stethoVersion}"

    // JSON Converter
    implementation "com.google.code.gson:gson:$gsonVersion"
    implementation "com.github.jasminb:jsonapi-converter:$jsonapiVersion"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacsonKotlinVersion"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    implementation "com.github.bumptech.glide:okhttp-integration:$glideOkhttpVersion"

    // Dagger2
    implementation "com.google.dagger:dagger:${daggerVersion}"
    implementation "com.google.dagger:dagger-android:${daggerVersion}"
    implementation "com.google.dagger:dagger-android-support:${daggerVersion}"
    kapt "com.google.dagger:dagger-compiler:${daggerVersion}"
    kapt "com.google.dagger:dagger-android-processor:${daggerVersion}"
    compileOnly "com.squareup.inject:assisted-inject-annotations-dagger2:$assistedinject"
    kapt "com.squareup.inject:assisted-inject-processor-dagger2:$assistedinject"

    // MvRx
    implementation "com.airbnb.android:mvrx:$mvrx"

    // Epoxy
    implementation "com.airbnb.android:epoxy:$epoxy"
    implementation "com.airbnb.android:epoxy-databinding:$epoxy"
    kapt "com.airbnb.android:epoxy-processor:$epoxy"

    implementation "com.github.Jay-Goo:RangeSeekBar:v3.0.0"
}

repositories {
    mavenCentral()
}